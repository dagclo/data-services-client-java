{"swagger":"2.0","info":{"version":"2.0","title":"Name validation","description":"The Name Validation data service parses fields, structured and unstructured,  pertaining to names in your records to offer updates, standardization, and  enrichment of name data. For example, it can provide you with information  to help you analyze and standardize customer contact data.\nThe service is a tool to validate and parse name information and structure name parts.  It can indicate that a part of a name is missing, and assign parts of an input string.  In addition, the service can help indicate that the name belongs to a person,  with given name, middle name, and family name fields, or belongs to an organization.  You can refine the results by using the country code to map the output more closely  to that country's name usage patterns.\n## Key functionality:\n* Formats and capitalizes name parts. Indicates how you wnat to handle different name parts. * Identifies the gender of a person based on the name. * Identifies missing name parts. * Indicates whether a particular name is typically a nickname and suggest other possible nicknames."},"basePath":"/","paths":{"/v2/process":{"parameters":[{"in":"header","name":"Job-ID","description":"Identifies the Job that this request pertains to","required":false,"type":"string"}],"post":{"summary":"Process structured name parts","description":"Takes structured name parts and applies genderization and capitalization functions to them. No correction or parsing functions are applied.\n","parameters":[{"in":"body","name":"body","description":"The name processing request body.","required":true,"schema":{"$ref":"#/definitions/processRequest"}}],"responses":{"200":{"description":"Successful response.","schema":{"$ref":"#/definitions/processResponse"}},"400":{"description":"Request is invalid because a required element is missing or empty.","schema":{"$ref":"#/definitions/error"}}}}},"/v2/parse":{"parameters":[{"in":"header","name":"Job-ID","description":"Identifies the job that pertains to this request.","required":false,"type":"string"}],"get":{"summary":"Parse a single name","description":"Takes a single name provided via a query string and applies genderization and capitalization functions to it. Similar in functionality to a POST request with the same path, except applied to a single name.\n","parameters":[{"in":"query","name":"name","type":"string","description":"The name to parse","required":true}],"responses":{"200":{"description":"Successful response.","schema":{"$ref":"#/definitions/parseResponse"}},"400":{"description":"Request is invalid becuase a required element is missing or empty.","schema":{"$ref":"#/definitions/error"}}}},"post":{"summary":"Parse names","description":"Takes name information and tries to parse it. This parser is usually most useful as a simple utility function\nwhen one or more unstructured name strings has to be split into a structured set of fields with\ngiven name, family name, and so forth.\n\nAs a parser, this function refrains from doing correction changes to names that are input. It also tries not to\nfilter out details that are not name parts or to change capitalization of the input. It does assign individual words to\nthe fields `given_name`, `middle_name`, and `family_name` based on a best match against string parsing rules. In cases of\nexact matches with reference data, it assigns specific words to output fields for salutations, honorifics, or titles.\n","parameters":[{"in":"body","name":"body","description":"The name parsing request body.","required":true,"schema":{"$ref":"#/definitions/parseRequest"}}],"responses":{"200":{"description":"Successful response.","schema":{"$ref":"#/definitions/parseResponse"}},"400":{"description":"Request is invalid because a required element is missing or empty.","schema":{"$ref":"#/definitions/error"}}}}}},"definitions":{"processRequest":{"type":"object","description":"Request of the process endpoint.","required":["records"],"properties":{"configuration":{"type":"object","properties":{"enable_capitalization":{"type":"boolean","default":true,"description":"Indicates whether to enable capitalization support, meaning that the service will correct the text\ncase of name tokens.\n"},"enable_nicknames":{"type":"boolean","default":true,"description":"Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the\nnickname knowledge data for each name.\n"},"enable_distinctive_terms":{"type":"boolean","default":false,"description":"Indicates whether or not to enable the identification of \"distinctive terms\" (usually words) in\norganization names or job titles. These terms are provided for situations where the entity name\nmay contain a set of generic terms as well as terms that are more distinctive. Separating out\nthe distinctive terms may make it easier to compare names since they have less generic \"noise\".\n"}}},"records":{"type":"array","maxItems":500,"items":{"$ref":"#/definitions/processRequestItem"}}}},"processRequestItem":{"type":"object","required":["given_name","family_name"],"allOf":[{"$ref":"#/definitions/nameDetailsIn"},{"type":"object","properties":{"id":{"type":"string","description":"An optional identifier used to pass through to the response."},"country":{"type":"string","description":"An optional country code for the person, which is used to apply any regional formatting rules.\nThe ISO 3166 2-letter country code is preferred.\n","example":"NO"}}}]},"processResponse":{"type":"object","description":"Response to the process endpoint.","properties":{"records":{"type":"array","items":{"$ref":"#/definitions/processResponseItem"}}}},"processResponseItem":{"type":"object","description":"Response item containing the results of processing.","properties":{"id":{"type":"string","description":"The optional identifier provided for this name on input."},"name":{"$ref":"#/definitions/nameDetailsOut"},"outcome":{"$ref":"#/definitions/OutcomeDefinition"}}},"parseRequest":{"type":"object","description":"Request of the parse endpoint.","required":["records"],"properties":{"configuration":{"type":"object","properties":{"enable_capitalization":{"type":"boolean","default":true,"description":"Indicates whether to enable capitalization support, meaning that the service will correct the text\ncase of name tokens.\n"},"enable_nicknames":{"type":"boolean","default":true,"description":"Indicates whether to enable the nickname lookup feature. Disable to turn off the lookup into the\nnickname knowledge data for each name.\n"},"middle_name_handling":{"description":"Determines whether middle names are included in the output and how they are handled. The following options are available:\n* `Separate` uses a parser with middle name awareness and puts the middle name tokens into the separate `middle_name` field.\n* `Allocate` uses a parser without middle name awareness and allocates the tokens into the most appropriate given or family name fields. \n","default":"Separate","$ref":"#/definitions/middleNameHandling"},"generation_title_handling":{"description":"Determines how to handle generation titles. The following options are available:\n* `Separate` keeps generation titles in the separate `generation_title` attribute.\n* `Familyname` always appends generation titles to the family name.\n* `Omit` removes generation titles.\n","default":"Separate","$ref":"#/definitions/generationTitleHandling"},"default_believed_entity_type":{"description":"The default `believed_entity_type` value to apply to names in the request.","$ref":"#/definitions/entityType"},"person_job_title_handling":{"description":"Defines how the service should handle a job title succeeding a person name\n(for example `John Doe, Account Manager`). There are two options in this case: Either\nconsider the job title to be a named entity alongside `person` and `organization` entity types,\nor to consider job titles to be an attribute of a `person` entity. In the latter case the title\nwill be appended to the `title_after` field which is normally used for academic titles and such.\n","$ref":"#/definitions/personJobTitleHandling"},"entity_change_category":{"description":"Defines how the service should respond (via the `category` attribute) to situations where\na different type of entity is found than expected/believed (see `believed_entity_type`). By\ndefault the service treats this as a correction, but for more strict behaviour the value\n`Invalid` may be desired.\n","$ref":"#/definitions/entityChangeCategory","default":"Corrected"},"default_country":{"type":"string","description":"The default `country` value to apply to names where no country is supplied.\nThe ISO 3166 2-letter country code is preferred.\n","example":"US"},"default_language":{"type":"string","description":"The default `language` value to apply to names where no language is supplied."},"enable_distinctive_terms":{"type":"boolean","default":false,"description":"Indicates whether or not to enable the identification of \"distinctive terms\" (usually words) in\norganization names or job titles. These terms are provided for situations where the entity name\nmay contain a set of generic terms as well as terms that are more distinctive. Separating out\nthe distinctive terms may make it easier to compare names since they have less generic \"noise\".\n"}}},"records":{"type":"array","maxItems":500,"items":{"$ref":"#/definitions/parseRequestItem"}}}},"parseRequestItem":{"type":"object","required":["unstructured_name"],"properties":{"id":{"type":"string","description":"An optional identifier used to pass through to the response."},"unstructured_name":{"type":"string","description":"The unstructured name string to parse.","maxLength":2048,"example":"Sir Doctor Bill Lange PhD"},"believed_entity_type":{"$ref":"#/definitions/entityType","description":"The believed entity type of the name","default":"person"},"language":{"type":"string","description":"Language code for the name, which is used to apply any language-oriented formatting rules."},"country":{"type":"string","description":"An optional country code for the name, which is used to apply any regional formatting rules.\nThe ISO 3166 2-letter country code is preferred.\n","example":"NO"}}},"parseResponse":{"type":"object","description":"Response to the parse endpoint.","properties":{"records":{"type":"array","items":{"$ref":"#/definitions/parseResponseItem"}}}},"parseResponseItem":{"type":"object","description":"Response item containing the results of parsing.","properties":{"id":{"type":"string","description":"The optional identifier provided for this name on input."},"names":{"type":"array","description":"The name(s) identified in the input. It will return zero in case of empty or skipped input.","items":{"$ref":"#/definitions/nameDetailsOut"}},"outcome":{"$ref":"#/definitions/OutcomeDefinition"}}},"nameDetailsIn":{"type":"object","properties":{"salutation":{"type":"string","description":"A greeting used in a letter or other written or non-written communication ([Read more](https://en.wikipedia.org/wiki/Salutation)).\n","example":"Dear"},"honorific":{"type":"string","description":"A title that conveys esteem or respect when used in addressing or referring to a person ([Read more](https://en.wikipedia.org/wiki/Honorific)).\n","example":"Sir"},"title_before":{"type":"string","description":"A title or function, typically professional or academic, that comes before the name parts.\n","example":"Doctor"},"given_name":{"type":"string","description":"One or more name parts or initials that make up what is commonly known as the \"given name\" or \"first name\" of the person.\n","example":"Bill Viggo"},"middle_name":{"type":"string","example":"Manthley","description":"One or more name parts or initials that make up what is commonly known as the \"middle name\" of the person.\n"},"family_name":{"type":"string","description":"One or more name parts or initials that make up what is commonly known as the \"family name\", \"last name\" or \"surname\" of the person.\n","example":"Lange"},"generation_title":{"type":"string","description":"A title related to a person's family or generation status.\n","example":"Junior"},"title_after":{"type":"string","description":"A title, typically professional or academic, that comes after the name parts.\n","example":"PhD"}}},"nameDetailsOut":{"type":"object","allOf":[{"$ref":"#/definitions/nameDetailsIn"},{"type":"object","properties":{"nicknames":{"type":"array","description":"An optional array of potential nicknames for the name parts of the person.\n","items":{"$ref":"#/definitions/nicknameItem"}},"distinctive_terms":{"type":"array","description":"An optional array (included when `enable_distinctive_terms` is true) containing terms\nthat are considered distinctive to this name. Usually these terms represent the parts\nof the name that are non-generic, such as the word \"Maersk\" out of \"Maersk Shipping A/S\".\nNote that there are no guarantees that any given name contains \"distinctive terms\", since\nsome names are composed of entirely \"generic\" terms.\n","example":["Maersk"],"items":{"type":"string"}},"family_name_prefix":{"type":"string","description":"One or more words that serve as the prefix to the first family name of the person.\n","example":"van"},"family_name_without_prefix":{"type":"string","description":"If the family name contains prefixes, this field provides the family name without any prefixes.\n","example":"Gogh"},"organization_name":{"type":"string","description":"The name of an organization, if `entity_type` was found to be an organization.","example":"Microsoft"},"organization_type":{"type":"string","description":"Any legal form, entity type or structural description of the company that is embedded in the name.","example":"Ltd"},"full_name":{"type":"string","description":"The representation of the full name without any salutation, honorific or title elements.\nFor `person` entities, this always equates to the concatenation of `given_name`, `middle_name`, `family_name`, and `generation_title`. The treatment of the `generation_title` element depends on the `generation_title_handling` configuration.\nFor `organization` entities, this always equates to the concatenation of `organization_name` and `organization_type`.\nFor `job_title` entities, this is simply the job title.\n","example":"Bill Viggo Manthley Lange"},"gender":{"description":"The gender of the person.\n","$ref":"#/definitions/gender"},"entity_type":{"description":"The type of entity that the name was found to represent.","$ref":"#/definitions/entityType"}}}]},"nicknameItem":{"type":"object","example":{"field":"given_name","orig":"Bill","alternate":"William"},"properties":{"field":{"description":"Describes in which field the potential nickname was found.","type":"string","enum":["given_name","middle_name","family_name","generation_title"]},"orig":{"type":"string","description":"The original input name part that may have a nickname or may be a nickname."},"alternate":{"type":"string","description":"The name part that may be a alternate for the original input."}}},"entityType":{"type":"string","enum":["person","organization","job_title"]},"gender":{"type":"string","enum":["Male","Female","Ambiguous","Unknown"]},"personJobTitleHandling":{"type":"string","enum":["Separate","TitleAfter"]},"entityChangeCategory":{"type":"string","enum":["Corrected","Doubtful","Invalid"]},"generationTitleHandling":{"type":"string","enum":["Separate","Familyname","Omit"]},"middleNameHandling":{"type":"string","enum":["Separate","Allocate"]},"OutcomeDefinition":{"type":"object","required":["category","codes"],"properties":{"category":{"type":"string","description":"The final status of the object.\n","enum":["Valid","Corrected","Invalid","Skipped","Doubtful"]},"codes":{"type":"object","description":"An object that contains correction codes as keys and messages as values.\n* `A11` - Given name matched to reference data. * `A12` - Given name inferred, but not matched to reference data. * `A13` - Given name initial(s) identified. * `A14` - No given name identified. * `A15` - Possible given name nicknames found. * `A21` - Family name matched to reference data. * `A22` - Family name inferred, but not matched to reference data. * `A23` - Family name initial(s) identified. * `A24` - No family name identified. * `A25` - Family name prefix(es) identified. * `C01` - Single name identified. * `C02` - Multiple names identified. * `C03` - Entity was believed to be person, but found organization. * `C04` - Entity was believed to be person, but found job title. * `C05` - Entity was believed to be organization, but found person. * `C06` - Entity was believed to be organization, but found job title. * `C07` - Entity was believed to be job title, but found person. * `C08` - Entity was believed to be job title, but found organization. * `C11` - Name capitalization corrected. * `C12` - Gender inferred from given name. * `C13` - Gender inferred from honorific. * `C14` - Gender inferred from title. * `E01` - Name input empty or blank. * `E02` - Name input too long.\n","additionalProperties":{"type":"string"},"example":{"A13":"Given name initial(s) identified.","A21":"Family name matched to reference data.","C01":"Single name identified.","C13":"Gender inferred from honorific."}}},"example":{"category":"Skipped","codes":{"E1":"Name empty or blank"}}},"error":{"type":"object","description":"Describes an error object.","required":["code","message"],"properties":{"code":{"type":"integer","description":"The HTTP status code."},"message":{"type":"string","description":"A human-readable error message."},"additional_details":{"type":"object","description":"Additional details about the error."}},"example":{"code":400,"message":"Bad request","additional_details":{"reason":"Required element not specified"}}}}}